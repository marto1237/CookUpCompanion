@page
@using System.Globalization
@model CookUp_Companion_web.Pages.PlannerModel
@{
    string[] daysOfWeek = new[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
}

@if (TempData["IsAddRecipeSuccess"] != null && (bool)TempData["IsAddRecipeSuccess"])
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @if (ViewData["SuccessMessage"] != null)
        {
            @TempData["SuccessMessage"]
        }

        <br />
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["IsAddRecipeSuccess"] != null && (bool)TempData["IsAddRecipeSuccess"]== false)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @if (ViewData["ErrorMessage"] != null)
        {
            @TempData["ErrorMessage"]
        }

        <br />
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
<div id="carouselExampleDark" class="carousel carousel-dark slide" data-interval="false">
    <div class="carousel-inner" role="listbox">
        @if (Model.Recipes != null && Model.Recipes.Count > 0)
        {
            <div class="carousel-item active">
                @foreach (var recipe in Model.Recipes)
                {
                    <div class="col-md-2">
                         <a asp-page="/RecipeInfo" asp-route-id=@Model.GetRecipeID(recipe)>
                        <div class="card-planner" data-recipe="@Model.GetRecipeID(recipe)" draggable="true">
                            <div class="card-body">
                                <img src="@($"data:image/png;base64,{Convert.ToBase64String(recipe.Picture)}")" alt="Recipe Image">
                                <div class="card-img-overlay">
                                    <div class="card-top">
                                        <div class="card-right">
                                            <button class="more" onclick="showOptionsMenu(this.id)">
                                                <i class="fa-solid fa-ellipsis"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="card-bottom">
                                        <p>@recipe.RecipeName</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        </a>
                    </div>
                }
            </div>
        }
        else
        {
            <p>No saved recipes found!</p>
        }
    </div>

    @if (Model.Recipes != null && Model.Recipes.Count > 1)
    {
        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    }
</div>

<div class="wrapper-calendar">
    <div class="calendar-nav">
        <div class="icons">
            <span id="prev" class="material-symbols-rounded"><</span>
            <p class="current-week"></p>
            <span id="next" class="material-symbols-rounded">></span>
            <form id="dateNavigationForm" method="get" >
                <!-- Hidden inputs to hold start and end date values -->
                <input type="hidden" id="startDate" name="startDate" value="@Model.StartDate" />
                <input type="hidden" id="endDate" name="endDate" value="@Model.EndDate" />
            </form>
        </div>
    </div>
    <div class="calendar">
        <ul class="weeks">
                
            <li>Mon</li>
            <li>Tue</li>
            <li>Wed</li>
            <li>Thu</li>
            <li>Fri</li>
            <li>Sat</li>
            <li>Sun</li>
        </ul>
        <ul class="days"></ul>
    </div>

    
</div>

<form method="post" asp-page-handler="SaveWeeklyPlan" id="weeklyPlanForm">
    <div class="container-days">
        @foreach (var day in daysOfWeek)
        {
            <div class="Day-@day day-container">
                <p>@day</p>
                <div class="recipes">
                    @if (Model.WeeklyPlan != null)
                    {
                        // Attempt to find a matching day plan using date parsing and conversion
                        @foreach (var dateKey in Model.WeeklyPlan.Keys)
                        {
                            DateTime parsedDate;
                            //  convert the dateKey in "d.M.yyyy" format. We use DateTime.TryParseExact which attempts to parse
                            if (DateTime.TryParseExact(dateKey.Split(' ')[0], "d.M.yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out parsedDate))
                            {
                                //  convert the dateKey in Day of the week which we new in order to list the recipes in the day containers
                                if (parsedDate.ToString("dddd", CultureInfo.InvariantCulture) == day)
                                {
                                    foreach (var recipe in Model.WeeklyPlan[dateKey])
                                    {
                                        <a asp-page="/RecipeInfo" asp-route-id=@Model.GetRecipeID(recipe)>
                                            <div class="card-planner" data-recipe="@Model.GetRecipeID(recipe)" draggable="true">
                                                <div class="card-body">
                                                    <img src="@($"data:image/png;base64,{Convert.ToBase64String(recipe.Picture)}")" alt="Recipe Image">
                                                    <div class="card-img-overlay">
                                                        <div class="card-top">
                                                            <div class="card-right">
                                                                <button class="more" onclick="showOptionsMenu(this.id)">
                                                                    <i class="fa-solid fa-ellipsis"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                        <div class="card-bottom">
                                                            <p>@recipe.RecipeName</p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </a>

                                    }
                                }
                            }
                        }
                    }
                </div>
            </div>
        }
    </div>

    <button type="submit" form="weeklyPlanForm" class="btn btn-primary btn-lg submitCreateRecipe text-center"
            style="padding-left: 2.5rem; padding-right: 2.5rem;">
        Save Weekly Plan
    </button>

</form>
 


    @section Scripts {
    <script>
        $(document).ready(function () {
            const recipes = document.querySelectorAll('.card-planner');
            const days = document.querySelectorAll('.day-container');

            recipes.forEach(recipe => {
                recipe.addEventListener('dragstart', function (e) {
                    e.dataTransfer.setData('text/plain', e.target.dataset.recipe);
                });
            });

            days.forEach(day => {
                day.addEventListener('dragover', function (e) {
                    e.preventDefault();
                });

                day.addEventListener('drop', function (e) {
                    e.preventDefault();
                    const recipeID = e.dataTransfer.getData('text/plain');
                    const original = document.querySelector(`[data-recipe="${recipeID}"]`);
                    if (original) {
                        // Here, instead of always cloning, we should check if the recipe is already in the day container
                        const clone = original.cloneNode(true); // Clone the node deeply
                        day.querySelector('.recipes').appendChild(clone);

                        // Prepare form input name using the day container's ID
                        const inputName = `recipePlans[${day.id}][]`; // This will create an array for each day

                        // Create hidden input element for the recipe
                        const input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = inputName;
                        input.value = recipeID;

                        // Append the input to the form
                        document.getElementById('weeklyPlanForm').appendChild(input);
                    }
                });
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            const daysTag = document.querySelector(".days");
            const currentWeek = document.querySelector(".current-week");
            const nextIcon = document.querySelector("#next");
            const prevIcon = document.querySelector("#prev");

            // Get hidden input values from the server
            let startDate = new Date(document.getElementById('startDate').value);
            let endDate = new Date(document.getElementById('endDate').value);

            if (startDate.getDate() === endDate.getDate()) {
                endDate = new Date(startDate);
                endDate.setDate(startDate.getDate() + 6); // Set end date to 6 days after start date
            }

            const months = [
                "January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"
            ];

            const renderCalendar = () => {
                currentWeek.innerText = `${startDate.getDate()} ${months[startDate.getMonth()]} - ${endDate.getDate()} ${months[endDate.getMonth()]}`;

                let liTag = "";
                let currentDate = new Date(startDate); // Create a new date object to manipulate without changing startDate

                for (let i = 0; i < 7; i++) {
                    let isToday = currentDate.toDateString() === new Date().toDateString() ? "active" : "";

                    // Format the ID with the full date
                    let dateForId = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(currentDate.getDate()).padStart(2, '0')}`;
                    let dayName = currentDate.toLocaleString('en-us', { weekday: 'long' });

                    // Find the day container by class name and set the id
                    let dayContainer = document.querySelector(`.Day-${dayName}`);
                    if (dayContainer) {
                        dayContainer.id = `${dateForId}`;
                    }

                    liTag += `<li class="${isToday}" data-date="${dateForId}">${currentDate.getDate()}</li>`;

                    currentDate.setDate(currentDate.getDate() + 1);
                }

                daysTag.innerHTML = liTag;

                // Update the hidden inputs with the new values
                document.getElementById('startDate').value = startDate.toISOString().split('T')[0];
                document.getElementById('endDate').value = endDate.toISOString().split('T')[0];
            };

            const navigateWeeks = (direction) => {
                // Move the start date based on the direction
                startDate.setDate(startDate.getDate() + direction * 7);
                // Update the end date to be 6 days after the new start date
                endDate = new Date(startDate);
                endDate.setDate(startDate.getDate() + 6);

                renderCalendar();
                document.getElementById("dateNavigationForm").submit();
            };

            prevIcon.addEventListener("click", function () {
                navigateWeeks(-1);
            });

            nextIcon.addEventListener("click", function () {
                navigateWeeks(1);
            });

            renderCalendar();
        });

        </script>


    }
